const request = require('supertest');
const app = require('../../src/app');

const connection = require('../../src/database/connection');

describe('Incidents', () => {
    beforeAll(async() => {;
        await connection.migrate.rollback();
        await connection.migrate.latest();
    });

    let recentlyCreatedOngId;
    it('should be able to create an ONG', async() => {
        const response = await request(app)
            .post('/ongs')
            .send({
                name: "APAD - Incident",
	            email: "contato@email.com",
	            whatsapp : "5514999999",
	            city:"Botucatu",
	            uf:"SP"
            });

        expect(response.body).toHaveProperty('id');
        expect(response.body.id).toHaveLength(8);

        recentlyCreatedOngId = response.body.id;
    });

    let recentlyCreatedIncidentId;
    it('should be able to create an incident for the created ong', async() => {
        const response = await request(app)
            .post('/incidents')
            .set('authorization', recentlyCreatedOngId)
            .send({
                title:"Caso do Tucano do PSDB OK",
                description:"Ele estÃ¡ arrecadando dinheiro para o partido. Ajude-o por favor.",
                value:10
            });

        expect(response.body).toHaveProperty('id');
        expect(response.body.id).toEqual(expect.any(Number));

        recentlyCreatedIncidentId = response.body.id;
    });

    it('should be able to delete a recently created incident for that recently created ong', async() => {
        const response = await request(app)
            .delete(`/incidents/${recentlyCreatedIncidentId}`)
            .set('authorization', recentlyCreatedOngId);
        
        expect(response).toHaveProperty('statusCode');
        expect(response.statusCode).toBe(204);
    })

    afterAll(async() => {
        await connection.destroy();
    });
});